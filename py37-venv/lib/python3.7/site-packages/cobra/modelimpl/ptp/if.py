# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2019 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
     This object holds interface information 

    """

    meta = ClassMeta("cobra.model.ptp.If")

    meta.moClassName = "ptpIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "PTP Interface"
    meta.writeAccessMask = 0x8008020040001
    meta.readAccessMask = 0x8008020040001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.nw.RtPathToIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))

    meta.parentClasses.add("cobra.model.ptp.Inst")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.l3.ProtIf")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "announceIntvl", "announceIntvl", 26267, PropCategory.REGULAR)
    prop.label = "Announce Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 4)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("announceIntvl", prop)

    prop = PropMeta("str", "announceMult", "announceMult", 26268, PropCategory.REGULAR)
    prop.label = "Announce Multiplier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 4)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("announceMult", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "delayIntvl", "delayIntvl", 26269, PropCategory.REGULAR)
    prop.label = "Delay Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(-1, 6)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("delayIntvl", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 26293, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 26272, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 2
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 26273, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "not-configured"
    prop._addConstant("if-down", "interface-down", 4)
    prop._addConstant("invalid-ip", "invalid-ip", 2)
    prop._addConstant("invalid-vrf", "invalid-vrf", 3)
    prop._addConstant("not-configured", "ptp-not-configured", 1)
    prop._addConstant("up", "up", 5)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "portId", "portId", 26275, PropCategory.REGULAR)
    prop.label = "Port Identity"
    prop.isOper = True
    meta.props.add("portId", prop)

    prop = PropMeta("str", "portSt", "portSt", 26274, PropCategory.REGULAR)
    prop.label = "Port State"
    prop.isOper = True
    prop.defaultValue = 9
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 9)
    prop._addConstant("faulty", "faulty", 6)
    prop._addConstant("init", "init", 1)
    prop._addConstant("listen", "listen", 2)
    prop._addConstant("master", "master", 3)
    prop._addConstant("passive", "passive", 8)
    prop._addConstant("premaster", "premaster", 5)
    prop._addConstant("slave", "slave", 4)
    prop._addConstant("uncalibrated", "uncalibrated", 7)
    meta.props.add("portSt", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "syncIntvl", "syncIntvl", 26270, PropCategory.REGULAR)
    prop.label = "Sync Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(-6, 1)]
    prop.defaultValue = -2
    prop.defaultValueStr = "-2"
    meta.props.add("syncIntvl", prop)

    prop = PropMeta("str", "vlan", "vlan", 26271, PropCategory.REGULAR)
    prop.label = "Vlan Id"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4094)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("vlan", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
